#!/usr/bin/env bash

set -eu -o pipefail

eecho() {
    echo "$@" >&2
}

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    eecho "Error: This script should not be sourced. Please run it directly."
    return 1 2>/dev/null || exit 1
fi

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    eecho "Error: Current directory is not in a Git repository"
    exit 1
fi

repo_root="$(git rev-parse --show-toplevel)"
if [[ -z "$repo_root" ]]; then
    eecho "Error: Could not determine Git repository root"
    exit 1
fi

create_symlink_if_needed() {
    local target_path="$1"
    local link_path="$2"

    if [[ ! -e "$repo_root/$target_path" ]]; then
        eecho "Warning: Target $repo_root/$target_path does not exist"
        return
    fi

    if [[ -L "$repo_root/$link_path" ]]; then
        local current_target="$(readlink "$repo_root/$link_path")"
        if [[ "$current_target" = "$target_path" ]]; then
            return
        else
            echo "Updating symlink $link_path: $current_target → $target_path"
            rm "$repo_root/$link_path"
        fi
    elif [[ -e "$repo_root/$link_path" ]]; then
        eecho "Warning: File or directory already exists at $repo_root/$link_path"
        return
    fi

    ln -s "$target_path" "$link_path"
}

create_symlinks() {
    trap 'popd >/dev/null 2>&1 || true' ERR EXIT

    pushd "$repo_root" >/dev/null

    create_symlink_if_needed ".auxiliary/configuration/conventions.md" "CLAUDE.md"
    create_symlink_if_needed ".auxiliary/configuration/conventions.md" "AGENTS.md"

    popd >/dev/null

    trap - ERR EXIT
}

download_instructions() {
    local instructions_dir="$repo_root/.auxiliary/instructions"
    local base_url="https://raw.githubusercontent.com/emcd/python-project-common/refs/tags/docs-1/documentation/common"
    local files=(
        "architecture.rst"
        "nomenclature.rst"
        "nomenclature-germanic.rst"
        "nomenclature-latin.rst"
        "practices.rst"
        "practices-python.rst"
        "practices-rust.rst"
        "practices-toml.rst"
        "requirements.rst"
        "style.rst"
        "tests.rst"
    )

    mkdir -p "$instructions_dir"

    echo "Downloading project documentation guides to .auxiliary/instructions/"

    local success_count=0
    for file in "${files[@]}"; do
        local url="$base_url/$file"
        local output_path="$instructions_dir/$file"

        if curl --fail --silent --location "$url" | tail -n +20 > "$output_path"; then
            if [[ -s "$output_path" ]]; then
                echo "  ✓ Downloaded $file ($(wc -c < "$output_path") bytes, boilerplate stripped)"
                success_count=$((success_count + 1))
            else
                eecho "  ✗ Downloaded $file but file is empty after processing"
                rm -f "$output_path"
            fi
        else
            eecho "  ✗ Failed to download $file"
        fi
    done

    if [[ $success_count -eq ${#files[@]} ]]; then
        echo "Successfully downloaded all ${#files[@]} documentation guides"
    else
        eecho "Warning: Only downloaded $success_count of ${#files[@]} documentation guides"
    fi
}

echo "Creating symlinks for LLM instruction files..."
create_symlinks
echo "Symlinks created successfully"

download_instructions

echo ""
echo "LLM instruction synchronization complete!"
echo "- Created symlinks: CLAUDE.md and AGENTS.md → .auxiliary/configuration/conventions.md"