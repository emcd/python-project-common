name: release

on:
  push:
    tags: [ 'v[1-9]+.*' ]
  workflow_dispatch:
    inputs:
      which-pypi:
        description: 'Which Python package index?'
        required: true
        type: choice
        options:
          - pypi
          - testpypi
        default: testpypi

env:
  DISTRIBUTIONS_PATH: '.auxiliary/artifacts/hatch-build'

jobs:

  initialize:
    uses: ./.github/workflows/core--initializer.yaml

  test:
    needs: [initialize]
    uses: emcd/python-project-common/.github/workflows/xrepo--tester.yaml@{{ _commit }}
    with:
      matrix-exclusions: {% raw %}'${{ needs.initialize.outputs.matrix-exclusions }}'{% endraw %}
      platforms: {% raw %}'${{ needs.initialize.outputs.platforms }}'{% endraw %}
      python-descriptors: {% raw %}'${{ needs.initialize.outputs.python-descriptors }}'{% endraw %}
      python-versions: {% raw %}'${{ needs.initialize.outputs.python-versions }}'{% endraw %}
      {%- if enable_rust_extension %}
      rust-targets: {% raw %}'${{ needs.initialize.outputs.rust-targets }}'{% endraw %}
      {%- endif %}

  report:
    needs: [initialize, test]
    uses: emcd/python-project-common/.github/workflows/xrepo--reporter.yaml@{{ _commit }}
    with:
      python-version: {% raw %}'${{ fromJSON(needs.initialize.outputs.python-versions)[0] }}'{% endraw %}

  docsgen:
    needs: [initialize, report]
    permissions:
      contents: write
      id-token: write
      pages: write
    uses: emcd/python-project-common/.github/workflows/xrepo--documenter.yaml@{{ _commit }}
    with:
      include-reports: true
      python-version: {% raw %}'${{ fromJSON(needs.initialize.outputs.python-versions)[0] }}'{% endraw %}

  package:
    needs: [initialize, docsgen]
    uses: emcd/python-project-common/.github/workflows/xrepo--packager.yaml@{{ _commit }}
    with:
      artifacts-path: '.auxiliary/artifacts/hatch-build' # TODO: Use environment.
      python-version: {% raw %}'${{ fromJSON(needs.initialize.outputs.python-versions)[0] }}'{% endraw %}

  {%- if enable_publication %}

  publish-pypi:
    if: {% raw %}${{ inputs.which-pypi == 'testpypi' || startsWith(github.ref, 'refs/tags/') }}{% endraw %}
    needs: [initialize, package]
    runs-on: ubuntu-latest
    environment:
      name: {% raw %}${{ inputs.which-pypi || 'pypi' }}{% endraw %}
      url: {% raw %}${{ fromJSON(needs.initialize.outputs.pypi-package-urls)[inputs.which-pypi || 'pypi'] }}{% endraw %}{{ package_name }}
    permissions:
      id-token: write  # Only needed for PyPI trusted publishing
    steps:

      - name: Restore Distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions--{% raw %}${{ github.run_id }}{% endraw %}
          path: {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}

      - name: Publish Distributions
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}
          repository-url: {% raw %}${{ fromJSON(needs.initialize.outputs.pypi-api-urls)[inputs.which-pypi || 'pypi'] }}{% endraw %}
          print-hash: true
          skip-existing: {% raw %}${{ inputs.which-pypi == 'testpypi' }}{% endraw %}
  {%- endif %}

  {%- if enable_executables %}

  create-executables:
      needs: [initialize, package]
      strategy:
        matrix:
          include:
            - os: ubuntu-22.04
              platform-name: linux-x86_64
            - os: windows-latest
              platform-name: windows-x86_64
            - os: macos-13
              platform-name: macos-x86_64
            - os: macos-latest
              platform-name: macos-arm64
      runs-on: {% raw %}${{ matrix.os }}{% endraw %}
      env:
        _PYI_EXECUTABLE_NAME: {{ distribution_name }}-{% raw %}${{ github.ref_name }}-${{ matrix.platform-name }}{% endraw %}
      steps:
        - name: Prepare Python
          uses: emcd/python-project-common/.github/actions/python-hatch@{{ _commit }}
          with:
            python-version: {% raw %}${{ fromJSON(needs.initialize.outputs.python-versions)[0] }}{% endraw %}

        # - name: Install UPX (Linux)  # Pre-installed on GHA Ubuntu runners
        #   if: {% raw %}${{ runner.os == 'Linux' }}{% endraw %}
        #   run: sudo apt-get install --yes upx

        - name: Install UPX (macOS)
          if: {% raw %}${{ runner.os == 'macOS' }}{% endraw %}
          run: brew install upx

        - name: Install UPX (Windows)
          if: {% raw %}${{ runner.os == 'Windows' }}{% endraw %}
          run: choco install upx

        - name: Create Executable
          run: |
            hatch --env develop run \
              pyinstaller \
                --clean --distpath=.auxiliary/artifacts/pyinstaller \
                pyinstaller.spec
          shell: bash

        - name: Validate Executable (Non-Windows)
          if: {% raw %}${{ runner.os != 'Windows' }}{% endraw %}
          run: |
            .auxiliary/artifacts/pyinstaller/${_PYI_EXECUTABLE_NAME} --help
          shell: bash

        - name: Save Executable
          uses: actions/upload-artifact@v4
          with:
            name: executables--{% raw %}${{ matrix.platform-name }}--${{ github.run_id }}{% endraw %}
            path: .auxiliary/artifacts/pyinstaller/{{ distribution_name }}-*
  {%- endif %}

  {%- if enable_publication %}

  publish-github:
    needs:
      - initialize
      - package
      - publish-pypi
      # --- BEGIN: Injected by Copier ---
      {%- if enable_executables %}
      - create-executables
      {%- endif %}
      # --- END: Injected by Copier ---
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:

      - name: Prepare Python
        uses: emcd/python-project-common/.github/actions/python-hatch@{{ _commit }}
        with:
          python-version: {% raw %}${{ fromJSON(needs.initialize.outputs.python-versions)[0] }}{% endraw %}

      - name: Restore Distributions
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions--{% raw %}${{ github.run_id }}{% endraw %}
          path: {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}

      {%- if enable_executables %}

      - name: Restore Executables
        uses: actions/download-artifact@v4
        with:
          pattern: executables--*--{% raw %}${{ github.run_id }}{% endraw %}
          path: {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}
          merge-multiple: true
      {%- endif %}

      - name: Generate Integrity Check Values
        run: |
          set -eu -o pipefail
          cd {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}
          sha256sum {{ distribution_name }}-* >SHA256SUMS.txt

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}/SHA256SUMS.txt
            {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}/{{ distribution_name }}-*

      - name: Generate Release Notes
        run: |
          set -eu -o pipefail
          hatch --env develop run \
            towncrier build --draft --version ${GITHUB_REF_NAME} \
            >.auxiliary/artifacts/tc-release-notes.rst
          {%- if enable_executables %}
          cat \
            documentation/executables.rst \
            .auxiliary/artifacts/tc-release-notes.rst \
            >.auxiliary/artifacts/release-notes.rst
          {%- else %}
          cp .auxiliary/artifacts/tc-release-notes.rst .auxiliary/artifacts/release-notes.rst
          {%- endif %}

      - name: Create Release
        if: {% raw %}${{ startsWith(github.ref, 'refs/tags/') }}{% endraw %}
        env:
          GITHUB_TOKEN: {% raw %}${{ github.token }}{% endraw %}
        run: |
          gh release create '{% raw %}${{ github.ref_name }}{% endraw %}' \
            --repo '{% raw %}${{ github.repository }}{% endraw %}' \
            --notes-file .auxiliary/artifacts/release-notes.rst

      - name: Publish Artifacts
        if: {% raw %}${{ startsWith(github.ref, 'refs/tags/') }}{% endraw %}
        env:
          GITHUB_TOKEN: {% raw %}${{ github.token }}{% endraw %}
        run: |
          gh release upload '{% raw %}${{ github.ref_name }}{% endraw %}' \
            {% raw %}${{ env.DISTRIBUTIONS_PATH }}{% endraw %}/** \
            --repo '{% raw %}${{ github.repository }}{% endraw %}'
  {%- endif %}
